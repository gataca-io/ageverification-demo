
load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;


events {
  worker_connections 128;
}

http {

#  access_log /dev/stdout;
  error_log /dev/stderr;

  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8 ipv6=off;
#  resolver 127.0.0.11 ipv6=off;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  # cache for JWKs
  lua_shared_dict jwks 1m;

  # NB: if you have "lua_code_cache off;", use:
  # set $session_secret xxxxxxxxxxxxxxxxxxx;
  # see: https://github.com/bungle/lua-resty-session#notes-about-turning-lua-code-cache-off

  server {
    listen 80 default;
    #server_name         $SERVER_NAME;

    root /usr/share/nginx/html;

    index index.html;

    location / {
      try_files $uri /index.html;
      if ($request_method = OPTIONS) {
            return 204;
      }

      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Max-Age 3600;
      add_header Access-Control-Expose-Headers Content-Length;
      add_header Access-Control-Allow-Headers Range;
      add_header Access-Control-Allow-Headers "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
      add_header X-Content-Type-Options "nosniff";
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
      include /etc/nginx/mime.types;
    }


    location /adult {
      set $session_cookie_samesite Lax;
      access_by_lua_block {
          local opts = {
             redirect_uri = "/code",

             discovery = "${IDP_HOST}/.well-known/openid-configuration",
             client_id = "$CLIENT_ID",
             client_secret = "$CLIENT_SECRET",
             scope = "openid $PRIMARY_AGE_SCOPE",
             auth_method = "client_secret_post",
             token_endpoint_auth_method = "client_secret_post",
             ssl_verify = "no",

             --accept_none_alg = false
             -- if your OpenID Connect Provider doesn't sign its id tokens
             -- (uses the "none" signature algorithm) then set this to true.


             --use_nonce = false
             -- You can use this option to disable it
             -- which may be necessary when talking to a broken OpenID
             -- Connect provider that ignores the paramter as the
             -- id_token will be rejected otherwise.


          }

          local openidc = require("resty.openidc")
          openidc.set_logging(nil, { DEBUG = ngx.DEBUG })

          local res, err = openidc.authenticate(opts)

          if err then
            return ngx.redirect("/denied")
          end

          -- at this point res is a Lua table with 3 keys:
          --   id_token    : a Lua table with the claims from the id_token (required)
          --   access_token: the access token (optional)
          --   user        : a Lua table with the claims returned from the user info endpoint (optional)

          --if res.user.email ~= "hans.zandbelt@zmartzone.eu" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          map $PRIMARY_AGE_SCOPE $prUData {
            ~^(over18)fae$  legalAge;
            ~^(over18)      legalAge;
            ~^(over16)fae$  over16;
            ~^(over21)fae$  over21;
            ~^(over65)fae$  over65;
            default         $PRIMARY_AGE_SCOPE;  
          }

          ngx.req.set_header("X-Id", res.id_token.id)
          if res.user == nil or res.user[prUData] ~= "accepted" then
            return ngx.redirect("/denied")
          end
      }

      try_files $uri $args $uri/ /index.html;

      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Max-Age 3600;
      add_header Access-Control-Expose-Headers Content-Length;
      add_header Access-Control-Allow-Headers Range;
      add_header Access-Control-Allow-Headers "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
      add_header X-Content-Type-Options "nosniff";
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
      include /etc/nginx/mime.types;
    }

    location /code {
      set $session_cookie_samesite Lax;
      access_by_lua_block {
          local opts = {
             redirect_uri = "/code",

             discovery = "${IDP_HOST}/.well-known/openid-configuration",
             client_id = "$CLIENT_ID",
             client_secret = "$CLIENT_SECRET",
             scope = "openid $PRIMARY_AGE_SCOPE",
             auth_method = "client_secret_post",
             token_endpoint_auth_method = "client_secret_post",
             ssl_verify = "no",

             --accept_none_alg = false
             -- if your OpenID Connect Provider doesn't sign its id tokens
             -- (uses the "none" signature algorithm) then set this to true.


             --use_nonce = false
             -- You can use this option to disable it
             -- which may be necessary when talking to a broken OpenID
             -- Connect provider that ignores the paramter as the
             -- id_token will be rejected otherwise.


          }

          local openidc = require("resty.openidc")
          openidc.set_logging(nil, { DEBUG = ngx.DEBUG })

          local res, err = openidc.authenticate(opts)

          if err then
            return ngx.redirect("/denied")
          end

          -- at this point res is a Lua table with 3 keys:
          --   id_token    : a Lua table with the claims from the id_token (required)
          --   access_token: the access token (optional)
          --   user        : a Lua table with the claims returned from the user info endpoint (optional)

          --if res.user.email ~= "hans.zandbelt@zmartzone.eu" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

           map $PRIMARY_AGE_SCOPE $prUData {
            ~^(over18)fae$  legalAge;
            ~^(over18)      legalAge;
            ~^(over16)fae$  over16;
            ~^(over21)fae$  over21;
            ~^(over65)fae$  over65;
            default         $PRIMARY_AGE_SCOPE;  
          }

          ngx.req.set_header("X-Id", res.id_token.id)
          if res.user == nil or res.user[prUData] ~= "accepted" then
            return ngx.redirect("/denied")
          end
      }

      try_files $uri $args $uri/ /index.html;

      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Max-Age 3600;
      add_header Access-Control-Expose-Headers Content-Length;
      add_header Access-Control-Allow-Headers Range;
      add_header Access-Control-Allow-Headers "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type";
      add_header X-Content-Type-Options "nosniff";
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
      include /etc/nginx/mime.types;
    }
  }
}
